##################
알고리즘 스터디 1주차 
	스택/큐
###################

스택이란 

영오로 Stack 쌓다 
프로그래밍에서 목록 혹은 리스트에서 접근이 한 쪽에서만 가능한 구조
LIFO(Last in FirstOut)가 기본 원리

##push
* 리스트에 추가 
##peek (엿보다)
* 가장 마지막에 들어간 데이터 조회
##pop
* 제일 마지막에 넣은 데이터 추출 
* 가지고 나와버림 남지 않는다

python의 list

Python 스택 직접 구현 

class Stack(list): 
	
	push = list.append
	
	def peek(self):   // 가장 마지막의 데이터 보여주는 peek 
		return self[-1]
			self[len(self)-1]


s = Stack()
s.push(1)
s.push(5)
s.push(10)
print("my stack is ", s)
print ("popped value is : ", s.pop())
print ("my stack is : ", s)
print ("peeked value is :" , s.peek())
print ("my stack is :", s) 



python list를 스택으로 활용

s = []
s.append(1)
s.append(5)
s.append(10)
print("my stack is :",s)
print("popped value is: "s.pop())
print("my stack is : ", s)
print ("peeked value is :", s[-1])
print("my stack is: ", s) 


###########
	큐
###########

## put 
* 리스트에 추가 

## peek 
* 가장 먼저 들어간 것 확인

## get
* 가장 먼저 들어간 것 가져감 

## 직접구현

class Queue(list):
	put = list.append
	
	def peek(self):
		return self[0]
		
	def get(self):
		return self.pop(0)
		
		
		
q = Queue()

q.put(1)
q.put(5)
q.put(10)
print("my queue is : ", q)
print("removed value is :", q.get())
print("my queue is: ", q) 
print("peeked value is:", q.peek())
print("my queue is : ", q)


## import

from queue import Queue
q = Queue()
q.put(1)
q.put(5)
q.put(10)

print("my queue is : ", q)
print("removed value is :", q.get())
print("my queue is : ", q)
print("peeked value is:", q.peek())
print("my queue is : ", q)

## List를 큐로 활용 

q = []
q.append(1)
q.append(5)
q.append(10)

print("my queue is : ", q)
print("removed value is :", q.pop(0))
print("my queue is : ", q)
print("peeked value is:", q[0])
print("my queue is : ", q)



	