#####################
 1주차 1번 문제 주식가격
#####################

문제 설명
초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 
가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.

제한사항
prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.
prices의 길이는 2 이상 100,000 이하입니다.


입출력 예
prices			return
[1, 2, 3, 2, 3]	[4, 3, 1, 1, 0]

입출력 예 설명
1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.
2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.
3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.
4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.
5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.
====================================================================
## 주식이 떨어질 때까지 걸리는 시간을 return 
	
* 스택에 주가를 넣는다 
* 새로운 주가가 들어왔을 때 마지막에 넣었던 주가와 비교한다
* 떨어지지 않았다면 다음 주가를 넣고 비교한다 
* for 1초부터 4초까지 
* while 
* 기준 < 새로운거  
		

def solution(prices):
    # answer = 몇 초 후 가격이 떨어지는지 저장 [ ]
	# for i in range 값이 i에 들어간다 
	# range(len(prices)) => 0 1 2 3 4  
	# i = 0 ; 5 -0 -1 = 4
	# i = 1 ; 5 -1 -1 = 3
	
    answer = [len(prices) - i - 1 for i in range(len(prices))]
    
    # stack = prices의 인덱스를 차례로 담아두는 배열
    stack = [0]
    
	# i 1 2 3 4 
    for i in range(1, len(prices)):
        while stack:
			#스택의 마지막 값 
            index = stack[-1]
            
            # 주식 가격이 떨어졌다면
			# 인덱스 0 vs 인덱스 1 
            if prices[index] > prices[i]:
				#answer 0 = 1 - 0 => 1초만에 떨어졌다 
                answer[index] = i - index
				#stack의 마지막 값 뽑아감 
                stack.pop()
            
            # 떨어지지 않았다면 다음 시점으로 넘어감 (주식 가격이 계속 증가하고 있다는 말)
            else:
                break
        
        # 스택에 추가한다.
        # 다음 시점으로 넘어갔을 때 다시 비교 대상이 될 예정이다.
		# 1 추가 
        stack.append(i)
        
    return answer
	
	